package edu.iastate.cs472.proj1;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.stream.Stream;

/**
 *  
 * @author Hoi Phung
 *
 */


/**
 * This class represents a board configuration in the 8-puzzle.  Only the initial configuration is 
 * generated by a constructor, while intermediate configurations will be generated via calling
 * the method successorState().  State objects will form two circular doubly-linked lists OPEN and 
 * CLOSED, which will be used by the A* algorithm to search for a path from a given initial board
 * configuration to the final board configuration below: 
 * 
 *  1 2 3 
 *  8   4
 *  7 6 5
 *
 * The final configuration (i.e., the goal state) above is not explicitly represented as an object 
 * of the State class. 
 */

public class State implements Cloneable, Comparable<State>
{
	public int[][] board; 		// configuration of tiles 
	
	public State previous;    	// previous node on the OPEN/CLOSED list
	public State next; 			// next node on the OPEN/CLOSED list
	public State predecessor; 	// predecessor node on the path from the initial state 
	
	public Move move;           // the move that generated this state from its predecessor
	public int numMoves; 	    // number of moves from the initial state to this state

	public static Heuristic heu; // heuristic used. shared by all the states. 
	
	private int numMismatchedTiles = -1;    // number of mismatched tiles between this state 
	                                        // and the goal state; negative if not computed yet.
	private int ManhattanDistance = -1;     // Manhattan distance between this state and the 
	                                        // goal state; negative if not computed yet. 
	private int numSingleDoubleMoves = -1;  // number of single and double moves with each double 
										    // move counted as one; negative if not computed yet. 

	
	/**
	 * Constructor (for the initial state).  
	 * 
	 * It takes a 2-dimensional array representing an initial board configuration. The empty 
	 * square is represented by the number 0.  
	 * 
	 *     a) Initialize all three links previous, next, and predecessor to null.  
	 *     b) Set move to null and numMoves to zero.
	 * 
	 * @param board
	 * @throws IllegalArgumentException		if board is not a 3X3 array or its nine entries are 
	 * 										not respectively the digits 0, 1, ..., 8. 
	 */
    public State(int[][] board) throws IllegalArgumentException 
    {
    	// TODO
		this.board = board;
		 previous = null;
	     next = null;
	     predecessor = null;
	     move = null;
		numMoves =0;
	}
    
    
    /**
     * Constructor (for the initial state) 
     * 
     * It takes a state from an input file that has three rows, each containing three digits 
     * separated by exactly one blank.  Every row starts with a digit. The nine digits are 
     * from 0 to 8 with no duplicates.  
     * 
     * Do the same initializations as for the first constructor. 
     * 
     * @param inputFileName
     * @throws FileNotFoundException
     * @throws IllegalArgumentException  if the file content does not meet the above requirements. 
     */
    public State (String inputFileName) throws FileNotFoundException, IllegalArgumentException
    {
    	try {
			board = new int[3][3];
			File file = new File( inputFileName);
			Scanner scnr = new Scanner(file);
			int[] string = new int[9];
			int index = 0;
			while (scnr.hasNextInt()) {
				string[index] = scnr.nextInt();
				index++;

			}
			int x = 0;
			for (int i = 0; i < 3; i++) {
				for (int j = 0; j < 3; j++) {
					board[i][j] = string[x];
					x++;
				}
			}


			previous = null;
			next = null;
			predecessor = null;
			move = null;
			numMoves = 0;
		}
    	catch (FileNotFoundException e){
    		System.out.println("The file is not found");
		}
    	// TODO 
	}
    
    
    /**
     * Generate the successor state resulting from a given move.  Throw an exception if the move 
     * cannot be executed.  Besides setting the array board[][] properly, you also need to do the 
     * following:
     * 
     *     a) set the predecessor of the successor state to this state;
     *     b) set the private instance variable move of the successor state to the parameter m; 
     *     c) Set the links next and previous to null;  
     *     d) Set the variable numMoves for the successor state to this.numMoves + 1. 
     * 
     * @param m  one of the moves LEFT, RIGHT, UP, DOWN, DBL_LEFT, DBL_RIGHT, DBL_UP, and DBL_DOWN
     * @return null  			if the successor state is this.predecessor
     *         successor state  otherwise 
     * @throws IllegalArgumentException if LEFT when the empty square is in the right column, or  
     *                                  if RIGHT when the empty square is in the left column, or
     *                                  if UP when the empty square is in the bottom row, or 
     *                                  if DOWN when the empty square is in the top row, or
     *                                  if DBL_LEFT when the empty square is not in the left column, or 
     *                                  if DBL_RIGHT when the empty square is not in the right column, or 
     *                                  if DBL_UP when the empty square is not in the top row, or 
     *                                  if DBL_DOWN when the empty square is not in the bottom row. 
     */                                  
    public State successorState(Move m) throws IllegalArgumentException 
    {


        State result = (State)this.clone();

		result.move = m;
		result.numMoves = this.numMoves +1;





        int x = 0;
        int y = 0;
		for(int i = 0; i < 3; i++){
			for(int j = 0; j <3; j ++){
				if(result.board[i][j] == 0){
					x = i;
					y = j;
					break;
				}
			}
		}

		int temp=0;
     switch (m){
		 case DBL_LEFT:
		 	try {
				temp = result.board[x][y + 1];
				result.board[x][y + 1] = result.board[x][y + 2];
				result.board[x][y + 2] = 0;
				result.board[x][y] = temp;
				break;
			}
			catch (ArrayIndexOutOfBoundsException e){
				return null;
			}
		 case DBL_DOWN:
		 	try {
				temp = result.board[x - 1][y];
				result.board[x - 1][y] = result.board[x - 2][y];
				result.board[x - 2][y] = 0;
				result.board[x][y] = temp;
				break;
			}
			catch (ArrayIndexOutOfBoundsException e){
				return null;
			}


		 case DBL_RIGHT:
		 	try {
				temp = result.board[x][y - 1];
				result.board[x][y - 1] = result.board[x][y - 2];
				result.board[x][y - 2] = 0;
				result.board[x][y] = temp;
				break;
			}
			catch (ArrayIndexOutOfBoundsException e){
				return null;
			}


		 case DBL_UP:
		 	try {
				temp = result.board[x + 1][y];
				result.board[x + 1][y] = result.board[x + 2][y];
				result.board[x + 2][y] = 0;
				result.board[x][y] = temp;
				break;
			}
			catch (ArrayIndexOutOfBoundsException e){
				return null;
			}

		 case UP:
		 	try {
				result.board[x][y] = result.board[x + 1][y];
				result.board[x + 1][y] = 0;
				break;
			}
			catch (ArrayIndexOutOfBoundsException e){
				return null;
			}

		 case DOWN:
		 	try {
				result.board[x][y] = result.board[x - 1][y];
				result.board[x - 1][y] = 0;
				break;
			}
			catch (ArrayIndexOutOfBoundsException e){
				return null;
			}

		 case LEFT:
		   	try {
				result.board[x][y] = result.board[x][y + 1];
				result.board[x][y + 1] = 0;
				break;
			}
			catch (ArrayIndexOutOfBoundsException e){
				return null;
			}
		 case RIGHT:
		 	try {
				result.board[x][y] = result.board[x][y - 1];
				result.board[x][y - 1] = 0;
				break;
			}
		 	catch (ArrayIndexOutOfBoundsException e){
		 		return null;
			}
		 default:
			 throw new IllegalStateException("Unexpected value: " + m);
	 }

		result.predecessor = this;
		if(predecessor != null && result.equals(predecessor)){
			return null;
		}

    	return result;
    }
    
        
    /**
     * Determines if the board configuration in this state can be rearranged into the goal configuration. 
     * According to the PowerPoint notes that introduce the 8-puzzle, we check if this state has an odd number 
     * of inversions. 
     */
    /**
     * 
     * @return true if the puzzle starting in this state can be rearranged into the goal state.
     */
    public boolean solvable()
    {
    	int numofInv = 0;
    	// TODO
		int[] array = new int[9];
        int index = 0;
		for(int i = 0 ; i <3; i ++){
			for (int j = 0; j <3; j ++){
				array[index] = board[i][j];
				index++;
			}
		}
		for(int i = 0; i < array.length; i ++){
			if(array[i] != 0){
				for(int j = i; j < array.length; j ++){
					if(array[j] != 0){
					if(array[i] > array[j]){
						numofInv++;
					}
					}
				}
			}
		}


    	return numofInv%2!=0;
    }
    
    
    /**
     * Check if this state is the goal state, namely, if the array board[][] stores the following contents: 
     * 
     * 		1 2 3 
     * 		8 0 4 
     * 		7 6 5 
     * 
     * @return
     */
    public boolean isGoalState()
    {
    	// TODO
		int[][] goal = {{1,2,3},{8,0,4},{7,6,5}};

		for(int i = 0; i < 3; i++){
			for(int j = 0; j <3; j ++){
				if(board[i][j] != goal[i][j]){
					return false;
				}
			}
		}

    	return true;
    }
    
    
    /**
     * Write the board configuration according to the following format:
     * 
     *     a) Output row by row in three lines with no indentations.  
     *     b) Two adjacent tiles in each row have exactly one blank in between. 
     *     c) The empty square is represented by a blank.  
     *     
     * For example, 
     * 
     * 2   3
     * 1 8 4
     * 7 6 5  
     * 
     */
    @Override 
    public String toString()
    {
    	String result = "";
    	// TODO
		for(int i = 0; i < 3; i++){
			for(int j = 0; j <3; j ++){
				if(board[i][j] == 0){
					result += "  ";
				}
				else {
					result += String.valueOf(board[i][j]) + " ";
				}
			}
			result+="\n";
		}

    	return result;
    }
    
    
    /**
     * Create a clone of this State object by copying over the board[][]. Set the links previous,
     * next, and predecessor to null. 
     * 
     * The method is called by SuccessorState(); 
     */
    @Override
    public Object clone()
    {
		 int[][] array = new int[3][3];
		 for (int i =  0; i < 3; i ++){
		 	for(int j = 0; j < 3; j ++){
		 		array[i][j] = board[i][j];
			}
		 }

		State clone = new State(array);
		clone.previous = null;
		clone.next = null;
		clone.predecessor = null;
		clone.numMoves = numMoves;

    	// TODO 
    	return clone;
    }
  

    /**
     * Compare this state with the argument state.  Two states are equal if their arrays board[][] 
     * have the same content.
     */
    @Override 
    public boolean equals(Object o)
    {
    	// TODO
		State compare = (State) o;

		for(int i =0 ; i < 3; i ++){
			for (int j = 0; j < 3; j++){
				if(board[i][j] != compare.board[i][j]){
					return false;
				}
			}
		}


    	return true;
    }
        
    
    /**
     * Evaluate the cost of this state as the sum of the number of moves from the initial state and 
     * the estimated number of moves to the goal state using the heuristic stored in the instance 
     * variable heu. 
     * 
     * If heu == TileMismatch, add up numMoves and the return values from computeNumMismatchedTiles().
     * If heu == MahattanDist, add up numMoves and the return values of computeMahattanDistance(). 
     * If heu == DoubleMoveHeuristic, add up numMoves and the return value of computeNumSingleDoubleMoves(). 
     * 
     * @return estimated number of moves from the initial state to the goal state via this state.
     * @throws IllegalArgumentException if heuristic is neither 0 nor 1. 
     */
    public int cost() throws IllegalArgumentException
    {

    	if(heu == Heuristic.TileMismatch){
    		computeNumMismatchedTiles();
    		return  numMoves + ManhattanDistance;
		}
    	else if(heu == Heuristic.TileMismatch){
    		computeManhattanDistance();
    		return numMoves+numMismatchedTiles;
		}

		computeNumSingleDoubleMoves();
    	return numMoves+numSingleDoubleMoves;
    }

    
    /**
     * Compare two states by the cost. Let c1 and c2 be the costs of this state and the argument state s.
     * 
     * @return -1 if c1 < c2 
     *          0 if c1 = c2 
     *          1 if c1 > c2 
     *          
     * Call the method cost(). This comparison will be used in maintaining the OPEN list by the A* algorithm.
     */
    @Override
    public int compareTo(State s)
    {
    	// TODO
		if(cost() < s.cost()){
			return -1;
		}
		else if(cost() > s.cost()){
			return 1;
		}
    	return 0; 
    }
    

    /**
     * Return the value of the private variable numMismatchedTiles if it is non-negative, and compute its 
     * value otherwise. 
     * 
     * @return the number of mismatched tiles between this state and the goal state. 
     */
	private int computeNumMismatchedTiles()
	{
		// TODO
		numMismatchedTiles = 0;
		int[][] goal = {{1,2,3},{8,0,4},{7,6,5}};
		for(int i =0 ; i < 3; i ++){
			for (int j = 0; j < 3; j++){
				if(board[i][j] != goal[i][j]){
					numMismatchedTiles++;
				}
			}
		}


		return numMismatchedTiles;
	}

	
	/**
	 * Return the value of the private variable ManhattanDistance if it is non-negative, and compute its value 
	 * otherwise.
	 * 
	 * @return the Manhattan distance between this state and the goal state. 
	 */
	private int computeManhattanDistance()
	{
		ManhattanDistance = 0;

		int[][] goal = {{1,2,3},{8,0,4},{7,6,5}};

		for(int i =0 ; i < 3; i ++){
			for (int j = 0; j < 3; j++){
				if(goal[i][j] != 0){
					int first = goal[i][j];
					for(int x =0 ; x < 3; x ++){
						for (int y = 0; y < 3; y++){
							if(first == board[x][y]){
								ManhattanDistance+=Math.abs(i-x) + Math.abs((j-y));
							}
						}
					}
				}
			}
		}



		// TODO


		return ManhattanDistance;
	}
	
	
	/**
	 * Return the value of the private variable numSingleDoubleMoves if it is non-negative, and compute its value 
	 * otherwise. 
	 * 
	 * @return the value of the private variable numSingleDoubleMoves that bounds from below the number of moves, 
	 *         single or double, which will take this state to the goal state.
	 */
	private int computeNumSingleDoubleMoves()
	{

		numSingleDoubleMoves = 0;


		int[][] goal = {{1,2,3},{8,0,4},{7,6,5}};
        int col = 8;
        int row = 8;


		for(int i =0 ; i < 3; i ++){
			for (int j = 0; j < 3; j++){
				if(goal[j][i] != 0){
					int first = goal[j][i];
					for(int x =0 ; x < 3; x ++){
						int second =board[x][i];
						if(second != 0){
							if(first == second) {
								col--;
							}
						}
					}
				}
			}
		}



		for(int i =0 ; i < 3; i ++){
			int[] compare= goal[i];
			int[] compared = board[i];
			for(int x = 0; x < 3; x ++){
				for(int y = 0; y < 3; y ++) {
					if(compare[x] != 0 && compared[y] != 0){
						if(compare[x] == compared[y]){
							row -=1;
						}
					}
				}
			}
		}





		numSingleDoubleMoves = row+col;

		return numSingleDoubleMoves ;

	}

	void setHeu(Heuristic h){
		this.heu = h;
	}

}
